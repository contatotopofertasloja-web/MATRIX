// configs/bots/claudia/flow/offer.js
import { callUser, getFixed } from "./_state.js";

export default async function offer(ctx) {
  const { text = "", state, settings } = ctx;
  const fx = getFixed(settings);
  const t = text.toLowerCase();

  // se pedirem pre√ßo cedo, responder sem link (√¢ncora + prova social + COD + garantia + sorteio)
  if (/pre√ß|valor|quanto|cust/.test(t)) {
    state.asked_price_once = true;
    const p = `De ${fx.priceOriginal} por **R$${fx.priceTarget}**`;
    return {
      reply:
        `Pra voc√™ ter no√ß√£o, ${callUser(state)}: ${p} no **COD** (paga s√≥ ao receber) + garantia de **7 dias**.\n` +
        `A gente j√° ajudou **${fx.soldCount.toLocaleString("pt-BR")}+** clientes, e todo m√™s tem **sorteio** üéÅ. ` +
        `Quer que eu **adicione seus dados** rapidinho e deixe tudo pronto?`,
      next: "fechamento",
    };
  }

  // se perguntarem rendimento/dura√ß√£o
  if (/quantas|aplica|rende|dura|mes(es)?/.test(t)) {
    return {
      reply: `Rende **${fx.applications}** e dura **${fx.duration}**, ${callUser(state)}. Com rotina certinha, o resultado fica ainda mais lindo ‚ú®. Quer que eu te diga como usar, ou prefere j√° agilizar o pedido no **COD**?`,
      next: "fechamento",
    };
  }

  // resposta padr√£o de oferta (sem pre√ßo se n√£o pediram)
  if (!state.asked_price_once) {
    return {
      reply:
        `Pelo que me contou, a Progressiva Vegetal bate certinho com seu objetivo, ${callUser(state)}. ` +
        `√â pr√°tica, segura e deixa o cabelo com acabamento de sal√£o.\n` +
        `Se quiser, eu j√° **adianto seu pedido no COD** e voc√™ s√≥ confere. Pode ser?`,
      next: "fechamento",
    };
  }

  // fallback
  return {
    reply: `Posso seguir e adiantar seu pedido no **COD**, ${callUser(state)}? Prometo agilizar e te mandar um resumo pra conferir üòå`,
    next: "fechamento",
  };
}
