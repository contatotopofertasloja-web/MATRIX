// configs/bots/claudia/flow/qualify.js
// Base preservada (1849). Ajuste: quando ainda nÃ£o hÃ¡ objetivo, responder em duas mensagens (replies[]):
// 1) micro explicaÃ§Ã£o (brief_explain) + 2) pergunta objetiva (ask_goal).
// MantÃ©m memÃ³ria ativa, Unicode e carimbos existentes.

import { ensureProfile, tagReply } from "./_state.js";
import { remember, recall } from "../../../../src/core/memory.js";

// â€”â€”â€” util unicode â€”â€”â€”
const T = (s = "") => String(s).normalize("NFC");
const toTitle = (s = "") => (s ? s[0].toLocaleUpperCase("pt-BR") + s.slice(1) : s);

// â€”â€”â€” detecÃ§Ã£o de objetivo â€”â€”â€”
function detectGoal(s = "") {
  const t = T(s).toLowerCase();
  if (/\balis(ar|amento)|liso|progressiva\b/.test(t)) return "alisar";
  if (/\bfrizz|arrepiad/.test(t)) return "frizz";
  if (/\b(baixar|reduzir|diminuir)\s+volume\b|\bvolume\b/.test(t)) return "volume";
  if (/\bbrilho|brilhos[oa]|iluminar\b/.test(t)) return "brilho";
  return null;
}

// â€”â€”â€” extraÃ§Ã£o de nome â€”â€”â€”
const RX = {
  NAME_SENTENCE:
    /\b(meu\s*nome\s*Ã©|me\s*chamo|sou)\s+([\p{L}â€™'\-]{2,}(?:\s+[\p{L}â€™'\-]{2,})*)/iu,
};

function sanitizeNameLikeGoal(name = "") {
  const n = String(name || "").trim().toLowerCase();
  if (!n) return "";
  const goals = new Set(["alisar", "frizz", "volume", "brilho"]);
  return goals.has(n) ? "" : name;
}

export default async function qualify(ctx = {}) {
  const { jid, state = {}, text = "" } = ctx;
  const s = T(text).trim();
  const profile = ensureProfile(state);

  // memÃ³ria anterior
  const saved = await recall(jid).catch(() => null);
  if (saved?.profile) Object.assign(profile, saved.profile);

  // nome
  const m = s.match(RX.NAME_SENTENCE);
  if (m) profile.name = toTitle(m[2].trim());
  profile.name = sanitizeNameLikeGoal(profile.name);

  // objetivo
  const goal = detectGoal(s);
  if (goal) profile.goal = goal;

  await remember(jid, { profile });

  // roteia para oferta quando jÃ¡ tiver objetivo
  if (profile.goal) state.stage = "offer.ask_cep_city";

  const first = profile.name ? profile.name.split(" ")[0] : null;

  if (profile.name && profile.goal) {
    return {
      reply: tagReply(
        ctx,
        `Perfeito, ${first || "ðŸ’š"}! JÃ¡ consigo verificar a **promoÃ§Ã£o do dia**. Me envia agora **Cidade + CEP** (ex.: 01001-000 â€“ SÃ£o Paulo/SP) para eu consultar.`,
        "flow/qualifyâ†’offer"
      ),
      meta: { tag: "flow/qualifyâ†’offer" },
    };
  }

  // â€”â€”â€” Ajuste: ainda sem objetivo â†’ duas mensagens (micro-explicaÃ§Ã£o + pergunta)
  if (!profile.goal) {
    const explain = tagReply(
      ctx,
      "Rapidinho ðŸ’š A Progressiva Vegetal Ã© **100% sem formol**, aprovada pela **Anvisa** e indicada para **todos os tipos de cabelo**. Ela hidrata enquanto alinha os fios âœ¨",
      "flow/qualify#brief_explain"
    );
    const ask = tagReply(
      ctx,
      "E me conta: qual Ã© o **seu objetivo hoje**?\nâ€¢ **Alisar**\nâ€¢ **Reduzir frizz**\nâ€¢ **Baixar volume**\nâ€¢ **Dar brilho** de salÃ£o em casa",
      "flow/qualify#ask_goal"
    );
    return {
      replies: [explain, ask],
      meta: { tag: "flow/qualify#ask_goal" },
    };
  }

  // fallback (mantido)
  return {
    reply: tagReply(
      ctx,
      "Ã“timo! Me envia **Cidade + CEP** (ex.: 01001-000 â€“ SÃ£o Paulo/SP) que eu consulto as condiÃ§Ãµes pra vocÃª.",
      "flow/qualifyâ†’offer"
    ),
    meta: { tag: "flow/qualifyâ†’offer" },
  };
}
