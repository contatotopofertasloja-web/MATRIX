// configs/bots/claudia/flow/greet.js
// Mant√©m conversa validada; corrige ‚Äúpulo do objetivo‚Äù.
// ‚Äî N√£o toca em offer.js ‚Äî
// Carimbos preservados: [flow/greet#ask_name], [flow/greet#ask_known], [flow/greet#ask_goal], [flow/greet‚Üíoffer]

import { ensureProfile, tagReply } from "./_state.js";

const T = (s="") => String(s).normalize("NFC").trim();

// Detec√ß√£o simples do objetivo (mesmo vocabul√°rio que voc√™ j√° vem usando)
function detectGoals(s="") {
  const t = T(s).toLowerCase();
  const goals = [];
  if (/\balis(ar|amento)|\bliso\b/.test(t)) goals.push("alisar");
  if (/\bfrizz|arrepiad/.test(t)) goals.push("frizz");
  if (/\b(baixar|reduzir|diminuir)\s+volume|\bvolume\b/.test(t)) goals.push("volume");
  if (/\bbrilho|iluminar\b/.test(t)) goals.push("brilho");
  return [...new Set(goals)];
}

export default async function greet(ctx = {}) {
  const { state = {}, text = "" } = ctx;
  const s = T(text);
  const profile = ensureProfile(state);

  // 0) Nome (mant√©m seu comportamento: ‚Äúmeu nome √©‚Ä¶‚Äù, ‚Äúme chamo‚Ä¶‚Äù, etc.)
  if (!profile.name) {
    // Se j√° perguntamos e a pessoa respondeu, tenta extrair
    const m = s.match(/\b(meu\s*nome\s*√©|me\s*chamo|sou)\s+(.{2,})$/i);
    if (m) profile.name = T(m[2]).replace(/\s+/g, " ").trim();

    if (!profile.name) {
      return {
        reply: tagReply(ctx, "Oi! Eu sou a Cl√°udia üíö Como posso te chamar?", "flow/greet#ask_name")
      };
    }
  }

  // 1) Pergunta ‚Äúj√° conhece?‚Äù
  if (!state._askedKnown) {
    state._askedKnown = true;
    const first = profile.name.split(" ")[0];
    return {
      reply: tagReply(ctx, `Prazer, ${first}! Voc√™ j√° conhece a nossa Progressiva Vegetal, 100% livre de formol?`, "flow/greet#ask_known")
    };
  }

  // 2) Se respondeu ‚Äúsim/n√£o‚Äù, ca√≠mos na pergunta do objetivo (n√£o pulamos)
  if (/\b(sim|j√°|conhe[c√ß]o)\b/i.test(s) || /\bn(√£|a)o\b/i.test(s)) {
    return {
      reply: tagReply(
        ctx,
        "Qual √© o seu objetivo hoje: **alisar, reduzir frizz, baixar volume ou dar brilho**?",
        "flow/greet#ask_goal"
      )
    };
  }

  // 3) Objetivo pode vir a qualquer momento
  const goals = detectGoals(s);
  if (goals.length) {
    profile.goal = goals.join("+");
    // Agora sim liberamos a etapa seguinte: pedir CEP/Cidade
    state.stage = "offer.ask_cep_city";
    return {
      reply: tagReply(
        ctx,
        "Perfeito! Pra liberar a condi√ß√£o do dia, me passe **CEP** (ex.: 00000-000) e **Cidade/UF** (ex.: Bras√≠lia/DF).",
        "flow/greet‚Üíoffer"
      )
    };
  }

  // 4) Refor√ßo gentil se a pessoa ainda n√£o disse o objetivo
  return {
    reply: tagReply(
      ctx,
      "S√≥ pra direcionar certinho: seu objetivo √© **alisar, reduzir frizz, baixar volume** ou **dar brilho**?",
      "flow/greet#ask_goal"
    )
  };
}
