import { callUser } from "./_state.js";

export default async function objections(ctx) {
  const { text = "", state } = ctx;
  state.turns = (state.turns || 0) + 1;
  const t = text.toLowerCase();

  if (/car[oa]|caro|preÃ§|valor/.test(t)) {
    return {
      reply:
        `Te entendo, ${callUser(state)}. A diferenÃ§a Ã© que vocÃª **paga sÃ³ quando recebe** (COD) e tem **7 dias** pra sentir o resultado â€” sem burocracia. ` +
        `Se nÃ£o amar, devolvemos. Quer que eu **adicione seus dados** e te envio o resumo pra confirmar?`,
      next: "fechamento",
    };
  }
  if (/alerg|reaÃ§Ã£o|sens[iÃ­]vel/.test(t)) {
    return {
      reply:
        `Ã“tima pergunta. Eu sempre recomendo um **teste de mecha** antes da aplicaÃ§Ã£o completa, tÃ¡? ` +
        `Aplica numa pequena Ã¡rea, aguarda e observa. Se quiser, te envio o passo a passo depois da compra.`,
      next: "oferta",
    };
  }
  if (/parcel|divid/.test(t)) {
    return {
      reply:
        `A gente trabalha forte com **COD** (super prÃ¡tico). Se preferir parcelar, dÃ¡ pra fazer **atÃ© 12x** no site â€” ` +
        `mas eu consigo adiantar seu **COD** agora e vocÃª paga sÃ³ ao receber. Te adianto?`,
      next: "fechamento",
    };
  }
  if (/vou pensar|depois|mais tarde|ainda n[aÃ£]o/.test(t)) {
    return {
      reply:
        `Combinado, ${callUser(state)} ğŸ’–. Posso te deixar um **resumo** com tudo certinho (benefÃ­cios, modo de uso e garantia) ` +
        `e, quando quiser, a gente conclui. Prefere assim?`,
      next: "oferta",
    };
  }

  return {
    reply: `Qual foi a sua dÃºvida principal, ${callUser(state)}? PreÃ§o, modo de uso, seguranÃ§aâ€¦ posso te ajudar em qualquer ponto ğŸ˜Š`,
    next: "oferta",
  };
}
