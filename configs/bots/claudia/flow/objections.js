// configs/bots/claudia/flow/objections.js
// Tratamento de obje√ß√µes (pre√ßo, seguran√ßa/alergia, parcelamento, hesita√ß√£o)
// Usa mem√≥ria unificada (recall/remember) e carimbos em todas as sa√≠das.

import { callUser, tagReply, normalizeSettings } from "./_state.js";
import { recall } from "../../../../src/core/memory.js";

function rx(s) { return new RegExp(s, "i"); }

export function match(text = "") {
  const t = String(text || "").toLowerCase();
  return /(car[oa]|caro|pre√ß|valor|alerg|rea√ß√£o|sens[i√≠]vel|parcel|divid|vou pensar|depois|ainda n[a√£]o)/i.test(t);
}

export default async function objections(ctx = {}) {
  const { jid, text = "", state = {}, settings = {} } = ctx;
  const S = normalizeSettings(settings);
  state.turns = (state.turns || 0) + 1;
  const t = String(text || "").toLowerCase();

  // puxa perfil salvo
  try {
    const saved = await recall(jid);
    if (saved?.profile) state.profile = { ...(state.profile || {}), ...saved.profile };
  } catch {}

  if (rx("car[oa]|caro|pre√ß|valor").test(t)) {
    return {
      reply: tagReply(
        S,
        `Te entendo, ${callUser(state) || "amiga"}. A diferen√ßa √© que voc√™ **paga s√≥ quando recebe** (COD) e tem **7 dias** para sentir o resultado ‚Äî sem burocracia. ` +
        `Se n√£o amar, devolvemos. Quer que eu **adicione seus dados** e te envio o resumo pra confirmar?`,
        "flow/objections#preco"
      ),
      meta: { tag: "flow/objections#preco" },
      next: "fechamento",
    };
  }

  if (rx("alerg|rea√ß√£o|sens[i√≠]vel|formol").test(t)) {
    return {
      reply: tagReply(
        S,
        `Pode ficar tranquila üíö √â **livre de formol adicionado**. Sempre recomendo **teste de mecha** antes da aplica√ß√£o completa, especialmente se o couro for sens√≠vel. Posso te mandar o passo a passo depois.`,
        "flow/objections#seguranca"
      ),
      meta: { tag: "flow/objections#seguranca" },
      next: "oferta",
    };
  }

  if (rx("parcel|divid|12x|cart[a√£]o|cartao").test(t)) {
    const par = S?.payments?.installments_max || 12;
    return {
      reply: tagReply(
        S,
        `No site d√° para parcelar em at√© **${par}x**. No **COD** voc√™ paga s√≥ quando recebe, bem pr√°tico. Prefere que eu adiante pelo **COD** agora?`,
        "flow/objections#parcelamento"
      ),
      meta: { tag: "flow/objections#parcelamento" },
      next: "fechamento",
    };
  }

  if (rx("vou pensar|depois|mais tarde|ainda n[a√£]o").test(t)) {
    return {
      reply: tagReply(
        S,
        `Combinado üíñ Posso te deixar um **resumo** com benef√≠cios, modo de uso e garantia. Quando quiser, a gente conclui.`,
        "flow/objections#hesitacao"
      ),
      meta: { tag: "flow/objections#hesitacao" },
      next: "oferta",
    };
  }

  return {
    reply: tagReply(S, `Sem problemas! Me diz s√≥ o que te deixou na d√∫vida que eu te ajudo rapidinho.`, "flow/objections#fallback"),
    meta: { tag: "flow/objections#fallback" },
    next: "qualificacao",
  };
}
